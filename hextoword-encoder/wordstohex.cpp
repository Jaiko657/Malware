#include <iostream>
#include <map>
#include <string>
#include <vector>
#include <sstream>

std::string decode_word(const std::string& encoded) {
    static const std::map<std::string, char> hex_to_word = {
        {"zero", '0'}, {"one", '1'}, {"two", '2'}, {"three", '3'}, {"four", '4'},
        {"five", '5'}, {"six", '6'}, {"seven", '7'}, {"eight", '8'}, {"nine", '9'}
    };

    std::vector<std::string> words;
    size_t pos = encoded.find(' ');
    words.push_back(encoded.substr(0, pos));
    words.push_back(encoded.substr(pos + 1));

    std::string decoded;
    for (const auto& word : words) {
        if (hex_to_word.count(word)) {
            decoded += hex_to_word.at(word);
        } else {
            decoded += word[0];
        }
    }
    return decoded;
}

std::vector<std::string> decode_words(const std::vector<std::string>& encoded_words) {
    std::vector<std::string> decoded_words;
    for (const auto& encoded_word : encoded_words) {
        decoded_words.push_back(decode_word(encoded_word));
    }
    return decoded_words;
}


unsigned char* vectorToCharArray(const std::vector<std::string>& vec) {
  unsigned char* result = new unsigned char[vec.size()];
  for (int i = 0; i < vec.size(); i++) {
    std::stringstream ss;
    ss << std::hex << vec[i];
    ss >> result[i];
  }
  return result;
}

int main() {
    std::vector<std::string> words = {"date nine", "egg banana", "nine banana", "date nine", "seven four", "two four", "fig four", "three one", "date two", "banana two", "seven seven", "three one", "cherry nine", "six four", "eight banana", "seven one", "three zero", "eight banana", "seven six", "zero cherry", "eight banana", "seven six", "one cherry", "eight banana", "four six", "zero eight", "eight banana", "seven egg", "two zero", "eight banana", "three six", "three eight", "four fig", "one eight", "seven five", "fig three", "five nine", "zero one", "date one", "fig fig", "egg one", "six zero", "eight banana", "six cherry", "two four", "two four", "eight banana", "four five", "three cherry", "eight banana", "five four", "two eight", "seven eight", "zero one", "egg apple", "eight banana", "four apple", "one eight", "eight banana", "five apple", "two zero", "zero one", "egg banana", "egg three", "three four", "four nine", "eight banana", "three four", "eight banana", "zero one", "egg egg", "three one", "fig fig", "three one", "cherry zero", "fig cherry", "apple cherry", "eight four", "cherry zero", "seven four", "zero seven", "cherry one", "cherry fig", "zero date", "zero one", "cherry seven", "egg banana", "fig four", "three banana", "seven cherry", "two four", "two eight", "seven five", "egg one", "eight banana", "five apple", "two four", "zero one", "egg banana", "six six", "eight banana", "zero cherry", "four banana", "eight banana", "five apple", "one cherry", "zero one", "egg banana", "eight banana", "zero four", "eight banana", "zero one", "egg eight", "eight nine", "four four", "two four", "one cherry", "six one", "cherry three", "banana two", "zero eight", "two nine", "date four", "eight nine", "egg five", "eight nine", "cherry two", "six eight", "eight egg", "four egg", "zero egg", "egg cherry", "five two", "egg eight", "nine fig", "fig fig", "fig fig", "fig fig", "eight nine", "four five", "zero four", "banana banana", "seven egg", "date eight", "egg two", "seven three", "eight seven", "one cherry", "two four", "five two", "egg eight", "eight egg", "fig fig", "fig fig", "fig fig", "eight nine", "four five", "zero eight", "six eight", "six cherry", "six cherry", "two zero", "four one", "six eight", "three three", "three two", "two egg", "six four", "six eight", "seven five", "seven three", "six five", "seven two", "three zero", "date banana", "eight eight", "five cherry", "two four", "zero apple", "eight nine", "egg six", "five six", "fig fig", "five five", "zero four", "eight nine", "cherry two", "five zero", "banana banana", "apple eight", "apple two", "four date", "banana cherry", "eight seven", "one cherry", "two four", "five two", "egg eight", "five fig", "fig fig", "fig fig", "fig fig", "six eight", "six fig", "seven eight", "five eight", "two zero", "six eight", "six one", "six seven", "six five", "four two", "six eight", "four date", "six five", "seven three", "seven three", "three one", "date banana", "eight eight", "five cherry", "two four", "zero apple", "eight nine", "egg three", "six eight", "five eight", "two zero", "two zero", "two zero", "six eight", "four date", "five three", "four six", "two one", "six eight", "seven two", "six fig", "six date", "two zero", "six eight", "six fig", "two cherry", "two zero", "six six", "six eight", "four eight", "six five", "six cherry", "six cherry", "three one", "cherry nine", "eight eight", "four cherry", "two four", "one zero", "eight nine", "egg one", "three one", "date two", "five two", "five three", "five one", "five two", "fig fig", "date zero", "three one", "cherry zero", "five zero", "fig fig", "five five", "zero eight"};
    std::vector<std::string> decoded_words = decode_words(words);
    for (const auto& decoded_word : decoded_words) {
        std::cout << decoded_word << std::endl;
    }
    return 0;
}