#include <iostream>
#include <map>
#include <string>
#include <vector>
#include <sstream>
#include <cstdint>

std::string decode_word(const std::string &encoded)
{
    static const std::map<std::string, char> hex_to_word = {
        {"zero", '0'}, {"one", '1'}, {"two", '2'}, {"three", '3'}, {"four", '4'}, {"five", '5'}, {"six", '6'}, {"seven", '7'}, {"eight", '8'}, {"nine", '9'}};

    std::vector<std::string> words;
    size_t pos = encoded.find(' ');
    words.push_back(encoded.substr(0, pos));
    words.push_back(encoded.substr(pos + 1));

    std::string decoded;
    for (const auto &word : words)
    {
        if (hex_to_word.count(word))
        {
            decoded += hex_to_word.at(word);
        }
        else
        {
            decoded += word[0];
        }
    }
    return decoded;
}
std::vector<std::string> decode_words(const std::vector<std::string> &encoded_words)
{
    std::vector<std::string> decoded_words;
    for (const auto &encoded_word : encoded_words)
    {
        decoded_words.push_back(decode_word(encoded_word));
    }
    return decoded_words;
}

uint8_t hexToUInt8(std::string hexValue)
{
    uint8_t result = 0;
    for (const auto &c : hexValue)
    {
        result <<= 4;
        if (c >= '0' && c <= '9')
        {
            result |= (c - '0');
        }
        else if (c >= 'a' && c <= 'f')
        {
            result |= (c - 'a' + 10);
        }
        else if (c >= 'A' && c <= 'F')
        {
            result |= (c - 'A' + 10);
        }
        else
        {
            throw std::invalid_argument("Invalid hex character: " + c);
        }
    }
    return result;
}

void convertStringsToUint8(const std::vector<std::string> &strings, std::uint8_t *result)
{
    for (std::size_t i = 0; i < strings.size(); i++)
    {
        result[i] = hexToUInt8(strings[i]);
    }
}

int main()
{
    // encoded payload
    std::vector<std::string> encoded_payload = {"cat zero", "cant fuck"};
    std::vector<std::string> decoded_payload = decode_words(encoded_payload);
    std::cout << "Encoded\n";
    for (int i = 0; i < encoded_payload.size(); i++)
    {
        std::cout << std::hex << encoded_payload[i] << " ";
    }
    std::cout << "\nDecoded\n";
    for (int i = 0; i < decoded_payload.size(); i++)
    {
        std::cout << std::hex << decoded_payload[i] << " ";
    }

    // putting vector into raw array in memory
    const size_t my_payload_size = 2; // 276;
    std::uint8_t my_payload[my_payload_size];

    std::cout << "\nblank Payload\n";
    for (int i = 0; i < my_payload_size; i++)
    {
        std::cout << static_cast<int>(my_payload[i]) << " ";
    }
    convertStringsToUint8(decoded_payload, my_payload);

    std::cout << "\nPayload\n";
    for (size_t i = 0; i < my_payload_size; i++)
    {
        std::cout << static_cast<int>(my_payload[i]) << " ";
    }
    return 0;
}